/**
 * grove: ExampleClusterer_CUDA.cu
 * Copyright (c) Torr Vision Group, University of Oxford, 2016. All rights reserved.
 */

#include "ExampleClusterer_CUDA.h"

#include <iostream>

#include "../shared/ExampleClusterer_Shared.h"

namespace grove
{
__global__ void ck_reset_temporaries(int *clustersPerReservoir,
    int *clusterSizes, int *clusterSizesHistogram, int reservoirCapacity,
    int startReservoirIdx)
{
  // This is launched with 1 block, 1 thread per reservoir.
  // No need to check if reservoirIdx is within bounds. It always is.
  const int reservoirIdx = threadIdx.x + startReservoirIdx;

  example_clusterer_reset_temporaries(clustersPerReservoir, clusterSizes, clusterSizesHistogram,
                                      reservoirIdx, reservoirCapacity);
}

template <typename ExampleType>
__global__ void ck_compute_density(const ExampleType *examples,
    const int *reservoirSizes, float *densities, int reservoirCapacity,
    int startReservoirIdx, float sigma)
{
  // The assumption is that the kernel indices are always valid.
  // 1 block per reservoir, 1 thread per element
  const int reservoirIdx = blockIdx.x + startReservoirIdx;
  const int elementIdx = threadIdx.x;

  example_clusterer_compute_density(examples, reservoirSizes, densities,
                                    reservoirCapacity, reservoirIdx, elementIdx, sigma);
}

template <typename ExampleType>
__global__ void ck_link_neighbors(const ExampleType *examples,
    const int *reservoirSizes, const float *densities, int *parents,
    int *clusterIndices, int *nbClustersPerReservoir, int reservoirCapacity,
    int startReservoirIdx, float tauSq)
{
  // The assumption is that the kernel indices are always valid.
  // 1 block per reservoir, 1 thread per element
  const int reservoirIdx = blockIdx.x + startReservoirIdx;
  const int elementIdx = threadIdx.x;

  example_clusterer_link_neighbors(examples, reservoirSizes, densities, parents,
                                   clusterIndices, nbClustersPerReservoir, reservoirCapacity,
                                   reservoirIdx, elementIdx, tauSq);
}

__global__ void ck_identify_clusters(const int *parents, int *clusterIndices, int *clusterSizes,
    int reservoirCapacity, int startReservoirIdx)
{
  // The assumption is that the kernel indices are always valid.
  // 1 block per reservoir, 1 thread per element
  const int reservoirIdx = blockIdx.x + startReservoirIdx;
  const int elementIdx = threadIdx.x;

  example_clusterer_identify_clusters(parents, clusterIndices, clusterSizes,
                                      reservoirCapacity, reservoirIdx, elementIdx);
}

__global__ void ck_compute_cluster_histogram(const int *clusterSizes,
    const int *nbClustersPerReservoir, int *clusterSizesHistogram,
    int reservoirCapacity, int startReservoirIdx)
{
  // The assumption is that the block indices are always valid.
  const int reservoirIdx = blockIdx.x + startReservoirIdx;
  const int clusterIdx = threadIdx.x;

  example_clusterer_compute_cluster_histogram(clusterSizes, nbClustersPerReservoir, clusterSizesHistogram,
                                              reservoirCapacity, reservoirIdx, clusterIdx);
}

__global__ void ck_select_clusters(const int *clusterSizes,
    const int *clusterSizesHistogram, const int *nbClustersPerReservoir,
    int *selectedClusters, int reservoirCapacity, int startReservoirIdx,
    int maxSelectedClusters, int minClusterSize)
{
  // The assumption is that the kernel indices are always valid.
  // "Sequential kernel": only one block is launched
  const int reservoirIdx = threadIdx.x + startReservoirIdx;

  example_clusterer_select_clusters(clusterSizes, clusterSizesHistogram, nbClustersPerReservoir,
                                    selectedClusters, reservoirCapacity, maxSelectedClusters,
                                    minClusterSize, reservoirIdx);
}

// TODO: this will need specialization for 2D keypoints without colour.
template <typename ExampleType, typename ClusterType>
__global__ void ck_compute_modes(const ExampleType *examples,
    const int *reservoirSizes, const int *clusterIndices,
    const int *selectedClusters, ClusterType *predictions,
    int reservoirCapacity, int startReservoirIdx, int maxSelectedClusters)
{
  // One thread per cluster, one block per reservoir
  const int reservoirIdx = blockIdx.x + startReservoirIdx;
  const int clusterIdx = threadIdx.x;

  example_clusterer_compute_modes(examples, reservoirSizes, clusterIndices,
                                  selectedClusters, predictions, reservoirCapacity,
                                  maxSelectedClusters, reservoirIdx, clusterIdx);
}

template <typename ExampleType, typename ClusterType>
ExampleClusterer_CUDA<ExampleType, ClusterType>::ExampleClusterer_CUDA(float sigma, float tau, uint32_t minClusterSize)
  : ExampleClusterer<ExampleType, ClusterType>(sigma, tau, minClusterSize)
{}

template <typename ExampleType, typename ClusterType>
void ExampleClusterer_CUDA<ExampleType, ClusterType>::find_modes(
    const ExampleImage_CPtr &exampleReservoirs,
    const ITMIntMemoryBlock_CPtr &keypointReservoirsSize,
    ClusterBlock_Ptr &predictions,
    uint32_t startIdx, uint32_t count)
{
  const uint32_t nbReservoirs = exampleReservoirs->noDims.height;
  const uint32_t reservoirCapacity = exampleReservoirs->noDims.width;

  if (startIdx + count > nbReservoirs)
    throw std::runtime_error("startIdx + count > nbReservoirs");

  {
    // Happens only once
    const Vector2i temporariesSize(reservoirCapacity, nbReservoirs);
    this->m_densities->ChangeDims(temporariesSize);
    this->m_parents->ChangeDims(temporariesSize);
    this->m_clusterIdx->ChangeDims(temporariesSize);
    this->m_clusterSizes->ChangeDims(temporariesSize);
    this->m_clusterSizesHistogram->ChangeDims(temporariesSize);

    this->m_selectedClusters->ChangeDims(
        Vector2i(ClusterType::MAX_MODES, nbReservoirs));

    this->m_nbClustersPerReservoir->ChangeDims(Vector2i(1, nbReservoirs));
  }

  const ExampleType *examples = exampleReservoirs->GetData(MEMORYDEVICE_CUDA);
  const int *reservoirSizes = keypointReservoirsSize->GetData(MEMORYDEVICE_CUDA);
  float *densities = this->m_densities->GetData(MEMORYDEVICE_CUDA);

  dim3 blockSize(reservoirCapacity); // One thread per item in each reservoir
  dim3 gridSize(count); // One block per reservoir to process

  int *nbClustersPerReservoir = this->m_nbClustersPerReservoir->GetData(
      MEMORYDEVICE_CUDA);
  int *clusterSizes = this->m_clusterSizes->GetData(MEMORYDEVICE_CUDA);
  int *clusterSizesHistogram = this->m_clusterSizesHistogram->GetData(
      MEMORYDEVICE_CUDA);

  // 1 single block, 1 thread per reservoir
  ck_reset_temporaries<<<1, gridSize>>>(nbClustersPerReservoir, clusterSizes,
      clusterSizesHistogram, reservoirCapacity, startIdx);
  ORcudaKernelCheck;

  ck_compute_density<<<gridSize, blockSize>>>(examples, reservoirSizes, densities, reservoirCapacity,
      startIdx, this->m_sigma);
  ORcudaKernelCheck;

  int *parents = this->m_parents->GetData(MEMORYDEVICE_CUDA);
  int *clusterIndices = this->m_clusterIdx->GetData(MEMORYDEVICE_CUDA);

  ck_link_neighbors<<<gridSize, blockSize>>>(examples, reservoirSizes, densities, parents, clusterIndices,
      nbClustersPerReservoir, reservoirCapacity, startIdx, this->m_tau * this->m_tau);
  ORcudaKernelCheck;

  ck_identify_clusters<<<gridSize, blockSize>>>(parents, clusterIndices, clusterSizes, reservoirCapacity, startIdx);
  ORcudaKernelCheck;

  ck_compute_cluster_histogram<<<gridSize, blockSize>>>(clusterSizes, nbClustersPerReservoir,
      clusterSizesHistogram, reservoirCapacity, startIdx);
  ORcudaKernelCheck;

  int *selectedClusters = this->m_selectedClusters->GetData(MEMORYDEVICE_CUDA);
  // 1 single block, 1 thread per reservoir
  ck_select_clusters<<<1, gridSize>>>(clusterSizes, clusterSizesHistogram,
      nbClustersPerReservoir, selectedClusters, reservoirCapacity, startIdx,
      ClusterType::MAX_MODES, this->m_minClusterSize);
  ORcudaKernelCheck;

  ClusterType *predictionsData = predictions->GetData(MEMORYDEVICE_CUDA);
  ck_compute_modes<<<gridSize, ClusterType::MAX_MODES>>>(examples, reservoirSizes, clusterIndices, selectedClusters,
      predictionsData, reservoirCapacity, startIdx,
      ClusterType::MAX_MODES);
  ORcudaKernelCheck;

//  m_nbClustersPerReservoir->UpdateHostFromDevice();
//  m_clusterSizes->UpdateHostFromDevice();
//  reservoirs->get_reservoirs_size()->UpdateHostFromDevice();
//
//  for (int i = 0; i < count; ++i)
//  {
//    std::cout << "Reservoir " << i + startIdx << " has "
//        << m_nbClustersPerReservoir->GetData(MEMORYDEVICE_CPU)[i + startIdx]
//        << " clusters and "
//        << reservoirs->get_reservoirs_size()->GetData(MEMORYDEVICE_CPU)[i
//            + startIdx] << " elements." << std::endl;
//    for (int j = 0;
//        j < m_nbClustersPerReservoir->GetData(MEMORYDEVICE_CPU)[i + startIdx];
//        ++j)
//    {
//      std::cout << "\tCluster " << j << ": "
//          << m_clusterSizes->GetData(MEMORYDEVICE_CPU)[(i + startIdx)
//              * reservoirCapacity + j] << " elements." << std::endl;
//    }
//  }
}

}
