/**
 * grove: ExampleClusterer_CUDA.tcu
 * Copyright (c) Torr Vision Group, University of Oxford, 2016. All rights reserved.
 */

#include "ExampleClusterer_CUDA.h"

#include <iostream>

#include "../shared/ExampleClusterer_Shared.h"

namespace grove {

//#################### CUDA KERNELS ####################

__global__ void ck_compute_cluster_indices(const int *parents, int *clusterIndices, int *clusterSizes, uint32_t exampleSetCapacity)
{
  const uint32_t exampleIdx = blockIdx.x * blockDim.x + threadIdx.x;
  const uint32_t exampleSetIdx = blockIdx.y;

  if(exampleIdx < exampleSetCapacity)
  {
    compute_cluster_index(exampleSetIdx, exampleIdx, exampleSetCapacity, parents, clusterIndices, clusterSizes);
  }
}

__global__ void ck_compute_cluster_size_histograms(const int *clusterSizes, const int *nbClustersPerExampleSet, int *clusterSizeHistograms, uint32_t exampleSetCapacity)
{
  // The potential cluster index is determined by the threadIdx and x coordinate of the block.
  const uint32_t clusterIdx = blockIdx.x * blockDim.x + threadIdx.x;
  const uint32_t exampleSetIdx = blockIdx.y;

  if(clusterIdx < nbClustersPerExampleSet[exampleSetIdx])
  {
    update_cluster_size_histogram(exampleSetIdx, clusterIdx, clusterSizes, clusterSizeHistograms, exampleSetCapacity);
  }
}

template <typename ExampleType>
__global__ void ck_compute_densities(const ExampleType *examples, const int *exampleSetSizes, float *densities, uint32_t exampleSetCapacity, float sigma)
{
  const uint32_t exampleIdx = blockIdx.x * blockDim.x + threadIdx.x;
  const uint32_t exampleSetIdx = blockIdx.y;

  if(exampleIdx < exampleSetCapacity)
  {
    // TODO: The speed of this could probably be improved by writing a proper reduction tree using shuffle operations.
    compute_density(exampleSetIdx, exampleIdx, examples, exampleSetSizes, exampleSetCapacity, sigma, densities);
  }
}

template <typename ExampleType>
__global__ void ck_compute_parents(const ExampleType *exampleSets, const int *exampleSetSizes, const float *densities, int *parents,
                                   int *clusterIndices, int *nbClustersPerExampleSet, uint32_t exampleSetCapacity, float tauSq)
{
  const uint32_t exampleIdx = blockIdx.x * blockDim.x + threadIdx.x;
  const uint32_t exampleSetIdx = blockIdx.y;

  if(exampleIdx < exampleSetCapacity)
  {
    compute_parent(
      exampleSetIdx, exampleIdx, exampleSets, exampleSetCapacity, exampleSetSizes,
      densities, tauSq, parents, clusterIndices, nbClustersPerExampleSet
    );
  }
}

template <typename ExampleType, typename ClusterType, int MaxClusters>
__global__ void ck_create_selected_clusters(const ExampleType *examples, const int *exampleSetSizes, uint32_t exampleSetCapacity,
                                            const int *clusterIndices, const int *selectedClusters, uint32_t maxSelectedClusters,
                                            Array<ClusterType,MaxClusters> *clusterContainers)
{
  const uint32_t selectedClusterIdx = blockIdx.x * blockDim.x + threadIdx.x;
  const uint32_t exampleSetIdx = blockIdx.y;

  if(selectedClusterIdx < maxSelectedClusters)
  {
    create_selected_cluster(
      exampleSetIdx, selectedClusterIdx, examples, exampleSetSizes, exampleSetCapacity,
      clusterIndices, selectedClusters, maxSelectedClusters, clusterContainers
    );
  }
}

template <typename ClusterType, int MaxClusters>
__global__ void ck_reset_cluster_containers(Array<ClusterType,MaxClusters> *clusterContainers, uint32_t exampleSetCount)
{
  const uint32_t exampleSetIdx = blockIdx.x * blockDim.x + threadIdx.x;
  if(exampleSetIdx < exampleSetCount)
  {
    reset_cluster_container(clusterContainers, exampleSetIdx);
  }
}

__global__ void ck_reset_temporaries(int *clustersPerExampleSet, int *clusterSizes, int *clusterSizeHistograms, uint32_t exampleSetCapacity, uint32_t exampleSetCount)
{
  const uint32_t exampleSetIdx = blockIdx.x * blockDim.x + threadIdx.x;
  if(exampleSetIdx < exampleSetCount)
  {
    reset_temporaries_for_set(exampleSetIdx, exampleSetCapacity, clustersPerExampleSet, clusterSizes, clusterSizeHistograms);
  }
}

__global__ void ck_select_clusters(const int *clusterSizes, const int *clusterSizeHistograms, const int *nbClustersPerExampleSet, int *selectedClusters,
                                   uint32_t exampleSetCapacity, uint32_t exampleSetCount, int maxSelectedClusters, int minClusterSize)
{
  const uint32_t exampleSetIdx = blockIdx.x * blockDim.x + threadIdx.x;
  if(exampleSetIdx < exampleSetCount)
  {
    select_clusters_for_set(
      exampleSetIdx, clusterSizes, clusterSizeHistograms, nbClustersPerExampleSet,
      exampleSetCapacity, maxSelectedClusters, minClusterSize, selectedClusters
    );
  }
}

//#################### CONSTRUCTORS ####################

template <typename ExampleType, typename ClusterType, int MaxClusters>
ExampleClusterer_CUDA<ExampleType,ClusterType,MaxClusters>::ExampleClusterer_CUDA(float sigma, float tau, uint32_t maxClusterCount, uint32_t minClusterSize)
: ExampleClusterer<ExampleType,ClusterType,MaxClusters>(sigma, tau, maxClusterCount, minClusterSize)
{}

//#################### PRIVATE MEMBER FUNCTIONS ####################

template <typename ExampleType, typename ClusterType, int MaxClusters>
void ExampleClusterer_CUDA<ExampleType,ClusterType,MaxClusters>::compute_cluster_indices(uint32_t exampleSetCapacity, uint32_t exampleSetCount)
{
  int *clusterIndices = this->m_clusterIndices->GetData(MEMORYDEVICE_CUDA);
  int *clusterSizes = this->m_clusterSizes->GetData(MEMORYDEVICE_CUDA);
  int *parents = this->m_parents->GetData(MEMORYDEVICE_CUDA);

  // Conceptually, we would like to have exampleSetCount thread blocks, each containing
  // exampleSetCapacity threads. However, since there are hardware limits on the number
  // of threads we can have per block, we adopt the alternative approach of using a 2D
  // grid of thread blocks, each containing a fixed number of threads. Using this approach,
  // the example set is denoted by the grid's y coordinate, and the index of the example
  // can be derived from the grid's x coordinate (see the kernel for details).
  dim3 blockSize(256);
  dim3 gridSize((exampleSetCapacity + blockSize.x - 1) / blockSize.x, exampleSetCount);

  ck_compute_cluster_indices<<<gridSize,blockSize>>>(parents, clusterIndices, clusterSizes, exampleSetCapacity);
  ORcudaKernelCheck;
}

template <typename ExampleType, typename ClusterType, int MaxClusters>
void ExampleClusterer_CUDA<ExampleType,ClusterType,MaxClusters>::compute_cluster_size_histograms(uint32_t exampleSetCapacity, uint32_t exampleSetCount)
{
  int *clusterSizeHistograms = this->m_clusterSizeHistograms->GetData(MEMORYDEVICE_CUDA);
  int *clusterSizes = this->m_clusterSizes->GetData(MEMORYDEVICE_CUDA);
  int *nbClustersPerExampleSet = this->m_nbClustersPerExampleSet->GetData(MEMORYDEVICE_CUDA);

  // Conceptually, we would like to have exampleSetCount thread blocks, each containing
  // exampleSetCapacity threads. However, since there are hardware limits on the number
  // of threads we can have per block, we adopt the alternative approach of using a 2D
  // grid of thread blocks, each containing a fixed number of threads. Using this approach,
  // the example set is denoted by the grid's y coordinate, and the index of the example
  // can be derived from the grid's x coordinate (see the kernel for details).
  dim3 blockSize(256);
  dim3 gridSize((exampleSetCapacity + blockSize.x - 1) / blockSize.x, exampleSetCount);

  ck_compute_cluster_size_histograms<<<gridSize,blockSize>>>(clusterSizes, nbClustersPerExampleSet, clusterSizeHistograms, exampleSetCapacity);
  ORcudaKernelCheck;
}

template <typename ExampleType, typename ClusterType, int MaxClusters>
void ExampleClusterer_CUDA<ExampleType,ClusterType,MaxClusters>::compute_densities(const ExampleType *exampleSets, const int *exampleSetSizes,
                                                                                   uint32_t exampleSetCapacity, uint32_t exampleSetCount)
{
  float *densities = this->m_densities->GetData(MEMORYDEVICE_CUDA);

  // Conceptually, we would like to have exampleSetCount thread blocks, each containing
  // exampleSetCapacity threads. However, since there are hardware limits on the number
  // of threads we can have per block, we adopt the alternative approach of using a 2D
  // grid of thread blocks, each containing a fixed number of threads. Using this approach,
  // the example set is denoted by the grid's y coordinate, and the index of the example
  // can be derived from the grid's x coordinate (see the kernel for details).
  dim3 blockSize(256);
  dim3 gridSize((exampleSetCapacity + blockSize.x - 1) / blockSize.x, exampleSetCount);

  ck_compute_densities<<<gridSize,blockSize>>>(exampleSets, exampleSetSizes, densities, exampleSetCapacity, Base::m_sigma);
  ORcudaKernelCheck;
}

template <typename ExampleType, typename ClusterType, int MaxClusters>
void ExampleClusterer_CUDA<ExampleType,ClusterType,MaxClusters>::compute_parents(const ExampleType *exampleSets, const int *exampleSetSizes,
                                                                                 uint32_t exampleSetCapacity, uint32_t exampleSetCount, float tauSq)
{
  int *clusterIndices = this->m_clusterIndices->GetData(MEMORYDEVICE_CUDA);
  const float *densities = this->m_densities->GetData(MEMORYDEVICE_CUDA);
  int *nbClustersPerReservoir = this->m_nbClustersPerExampleSet->GetData(MEMORYDEVICE_CUDA);
  int *parents = this->m_parents->GetData(MEMORYDEVICE_CUDA);

  // Conceptually, we would like to have exampleSetCount thread blocks, each containing
  // exampleSetCapacity threads. However, since there are hardware limits on the number
  // of threads we can have per block, we adopt the alternative approach of using a 2D
  // grid of thread blocks, each containing a fixed number of threads. Using this approach,
  // the example set is denoted by the grid's y coordinate, and the index of the example
  // can be derived from the grid's x coordinate (see the kernel for details).
  dim3 blockSize(256);
  dim3 gridSize((exampleSetCapacity + blockSize.x - 1) / blockSize.x, exampleSetCount);

  ck_compute_parents<<<gridSize,blockSize>>>(
    exampleSets, exampleSetSizes, densities, parents, clusterIndices,
    nbClustersPerReservoir, exampleSetCapacity, tauSq
  );
  ORcudaKernelCheck;
}

template <typename ExampleType, typename ClusterType, int MaxClusters>
void ExampleClusterer_CUDA<ExampleType,ClusterType,MaxClusters>::create_selected_clusters(const ExampleType *examples, const int *exampleSetSizes,
                                                                                          uint32_t exampleSetCapacity, uint32_t exampleSetCount,
                                                                                          ClusterContainer *clusterContainers)
{
  const int *clusterIndices = this->m_clusterIndices->GetData(MEMORYDEVICE_CUDA);
  const int *selectedClusters = this->m_selectedClusters->GetData(MEMORYDEVICE_CUDA);

  // Conceptually, we would like to have exampleSetCount thread blocks, each containing
  // maxSelectedClusters threads. However, since there are hardware limits on the number
  // of threads we can have per block, we adopt the alternative approach of using a 2D
  // grid of thread blocks, each containing a fixed number of threads. Using this approach,
  // the example set is denoted by the grid's y coordinate, and the index of the cluster
  // can be derived from the grid's x coordinate (see the kernel for details).
  dim3 blockSize(32);
  dim3 gridSize((this->m_maxClusterCount + blockSize.x - 1) / blockSize.x, exampleSetCount);

  ck_create_selected_clusters<<<gridSize,blockSize>>>(
    examples, exampleSetSizes, exampleSetCapacity, clusterIndices, selectedClusters, this->m_maxClusterCount, clusterContainers
  );
  ORcudaKernelCheck;
}

template <typename ExampleType, typename ClusterType, int MaxClusters>
typename ExampleClusterer_CUDA<ExampleType, ClusterType, MaxClusters>::ClusterContainer *
ExampleClusterer_CUDA<ExampleType,ClusterType,MaxClusters>::get_pointer_to_cluster_container(const ClusterContainers_Ptr& clusterContainers, uint32_t exampleSetIdx) const
{
  return clusterContainers->GetData(MEMORYDEVICE_CUDA) + exampleSetIdx;
}

template <typename ExampleType, typename ClusterType, int MaxClusters>
const ExampleType *ExampleClusterer_CUDA<ExampleType, ClusterType, MaxClusters>::get_pointer_to_example_set(const ExampleImage_CPtr& exampleSets, uint32_t setIdx) const
{
  const int exampleSetCapacity = exampleSets->noDims.width;
  return exampleSets->GetData(MEMORYDEVICE_CUDA) + setIdx * exampleSetCapacity;
}

template <typename ExampleType, typename ClusterType, int MaxClusters>
const int *ExampleClusterer_CUDA<ExampleType,ClusterType,MaxClusters>::get_pointer_to_example_set_size(const ITMIntMemoryBlock_CPtr& exampleSetSizes, uint32_t setIdx) const
{
  return exampleSetSizes->GetData(MEMORYDEVICE_CUDA) + setIdx;
}

template <typename ExampleType, typename ClusterType, int MaxClusters>
void ExampleClusterer_CUDA<ExampleType,ClusterType,MaxClusters>::reset_cluster_containers(ClusterContainer *clusterContainers, uint32_t exampleSetCount) const
{
  // Launch one thread per example set.
  dim3 blockSize(256);
  dim3 gridSize((exampleSetCount + blockSize.x - 1) / blockSize.x);

  ck_reset_cluster_containers<<<gridSize,blockSize>>>(clusterContainers, exampleSetCount);
  ORcudaKernelCheck;
}

template <typename ExampleType, typename ClusterType, int MaxClusters>
void ExampleClusterer_CUDA<ExampleType,ClusterType,MaxClusters>::reset_temporaries(uint32_t exampleSetCapacity, uint32_t exampleSetCount)
{
  int *clusterSizeHistograms = this->m_clusterSizeHistograms->GetData(MEMORYDEVICE_CUDA);
  int *clusterSizes = this->m_clusterSizes->GetData(MEMORYDEVICE_CUDA);
  int *nbClustersPerExampleSet = this->m_nbClustersPerExampleSet->GetData(MEMORYDEVICE_CUDA);

  // Launch one thread per example set.
  dim3 blockSize(256);
  dim3 gridSize((exampleSetCount + blockSize.x - 1) / blockSize.x);

  ck_reset_temporaries<<<gridSize,blockSize>>>(nbClustersPerExampleSet, clusterSizes, clusterSizeHistograms, exampleSetCapacity, exampleSetCount);
  ORcudaKernelCheck;
}

template <typename ExampleType, typename ClusterType, int MaxClusters>
void ExampleClusterer_CUDA<ExampleType,ClusterType,MaxClusters>::select_clusters(uint32_t exampleSetCapacity, uint32_t exampleSetCount)
{
  int *clusterSizeHistograms = this->m_clusterSizeHistograms->GetData(MEMORYDEVICE_CUDA);
  int *clusterSizes = this->m_clusterSizes->GetData(MEMORYDEVICE_CUDA);
  int *nbClustersPerExampleSet = this->m_nbClustersPerExampleSet->GetData(MEMORYDEVICE_CUDA);
  int *selectedClusters = this->m_selectedClusters->GetData(MEMORYDEVICE_CUDA);

  // Launch one thread per example set.
  dim3 blockSize(256);
  dim3 gridSize((exampleSetCount + blockSize.x - 1) / blockSize.x);

  ck_select_clusters<<<gridSize,blockSize>>>(
    clusterSizes, clusterSizeHistograms, nbClustersPerExampleSet, selectedClusters,
    exampleSetCapacity, exampleSetCount, this->m_maxClusterCount, this->m_minClusterSize
  );
  ORcudaKernelCheck;
}

}
