/**
 * grove: RGBDPatchFeatureCalculator_CUDA.tcu
 * Copyright (c) Torr Vision Group, University of Oxford, 2017. All rights reserved.
 */

#include "features/cuda/RGBDPatchFeatureCalculator_CUDA.h"

#include "features/shared/RGBDPatchFeatureCalculator_Shared.h"

namespace grove {

namespace {

//#################### CUDA KERNELS ####################

template <RGBDPatchFeatureCalculatorDifferenceType DifferenceType, typename KeypointType, typename DescriptorType>
__global__ void ck_compute_colour_features(Vector2i inDepthSize, Vector2i inRgbSize, Vector2i outSize, const Vector4u *rgb,
                                           const float *depths, const Vector4i *rgbOffsets, const uchar *rgbChannels,
                                           const KeypointType *keypoints, uint32_t rgbFeatureCount, uint32_t rgbFeatureOffset,
                                           uint32_t featureStep, bool normalise, DescriptorType *descriptors)
{
  // Determine the coordinates of the pixel in the descriptors image into which we will write the colour feature.
  const Vector2i xyOut(threadIdx.x + blockIdx.x * blockDim.x, threadIdx.y + blockIdx.y * blockDim.y);

  if(xyOut.x < outSize.width && xyOut.y < outSize.height)
  {
    // Determine the coordinates of the pixel in the RGBD image for which we are computing the feature descriptor.
    const Vector2i xyIn = xyOut * featureStep;

    // Compute the colour feature for the specified RGBD pixel and write it into the correct place in the pixel's descriptor.
    compute_colour_features<DifferenceType>(xyIn, xyOut, inDepthSize, inRgbSize, outSize, rgb, depths, rgbOffsets, rgbChannels, keypoints, rgbFeatureCount, rgbFeatureOffset, normalise, descriptors);
  }
}

template <RGBDPatchFeatureCalculatorDifferenceType DifferenceType, typename KeypointType, typename DescriptorType>
__global__ void ck_compute_depth_features(Vector2i inSize, Vector2i outSize, const float *depths, const Vector4i *depthOffsets,
                                          const KeypointType *keypoints, uint32_t depthFeatureCount, uint32_t depthFeatureOffset,
                                          uint32_t featureStep, bool normalise, DescriptorType *descriptors)
{
  // Determine the coordinates of the pixel in the descriptors image into which we will write the depth feature.
  const Vector2i xyOut(threadIdx.x + blockIdx.x * blockDim.x, threadIdx.y + blockIdx.y * blockDim.y);

  if(xyOut.x < outSize.width && xyOut.y < outSize.height)
  {
    // Determine the coordinates of the pixel in the RGBD image for which we are computing the feature descriptor.
    const Vector2i xyIn(xyOut.x * featureStep, xyOut.y * featureStep);

    // Compute the depth feature for the specified RGBD pixel and write it into the correct place in the pixel's descriptor.
    compute_depth_features<DifferenceType>(xyIn, xyOut, inSize, outSize, depths, depthOffsets, keypoints, depthFeatureCount, depthFeatureOffset, normalise, descriptors);
  }
}

template <typename KeypointType>
__global__ void ck_compute_keypoints(const Vector2i inDepthSize, const Vector2i inRgbSize, const Vector2i outSize,
                                     const Vector4u *rgb, const float *depths, const Matrix4f cameraPose,
                                     const Vector4f intrinsics, const uint32_t featureStep, KeypointType *keypoints)
{
  // Determine the coordinates of the pixel in the keypoints image into which we will write the keypoint.
  const Vector2i xyOut(threadIdx.x + blockIdx.x * blockDim.x, threadIdx.y + blockIdx.y * blockDim.y);

  if(xyOut.x < outSize.width && xyOut.y < outSize.height)
  {
    // Determine the coordinates of the pixel in the RGBD image for which we are computing the keypoint.
    const Vector2i xyIn = xyOut * featureStep;

    // Compute the keypoint for the specified RGBD pixel and write it into the keypoints image.
    compute_keypoint(xyIn, xyOut, inDepthSize, inRgbSize, outSize, rgb, depths, cameraPose, intrinsics, keypoints);
  }
}

}

//#################### CONSTRUCTORS ####################

template <typename KeypointType, typename DescriptorType>
RGBDPatchFeatureCalculator_CUDA<KeypointType,DescriptorType>::RGBDPatchFeatureCalculator_CUDA(bool depthAdaptive, RGBDPatchFeatureCalculatorDifferenceType depthDifferenceType, uint32_t depthFeatureCount, uint32_t depthFeatureOffset, uint32_t depthMinRadius, uint32_t depthMaxRadius, RGBDPatchFeatureCalculatorDifferenceType rgbDifferenceType,
                                                                                              uint32_t rgbFeatureCount, uint32_t rgbFeatureOffset, uint32_t rgbMinRadius, uint32_t rgbMaxRadius)
: RGBDPatchFeatureCalculator<KeypointType,DescriptorType>(depthAdaptive,
                                                          depthDifferenceType,
                                                          depthFeatureCount,
                                                          depthFeatureOffset,
                                                          depthMinRadius,
                                                          depthMaxRadius,
                                                          rgbDifferenceType,
                                                          rgbFeatureCount,
                                                          rgbFeatureOffset,
                                                          rgbMinRadius,
                                                          rgbMaxRadius)
{
  // Copy the memory blocks used to specify the features across to the GPU.
  this->m_depthOffsets->UpdateDeviceFromHost();
  this->m_rgbChannels->UpdateDeviceFromHost();
  this->m_rgbOffsets->UpdateDeviceFromHost();
}

//#################### PUBLIC MEMBER FUNCTIONS ####################

template <typename KeypointType, typename DescriptorType>
void RGBDPatchFeatureCalculator_CUDA<KeypointType,DescriptorType>::compute_keypoints_and_features(const ITMUChar4Image *rgbImage, const ITMFloatImage *depthImage,
                                                                                                  const Matrix4f& cameraPose, const Vector4f& intrinsics,
                                                                                                  KeypointsImage *keypointsImage, DescriptorsImage *descriptorsImage) const
{
  // The size of the colour image is used if we have to compute both colour-based features and depth-based features.
  const Vector2i inRgbSize = rgbImage->noDims;

  // Check that the input images are valid and compute the output dimensions.
  Vector2i inSize;
  const Vector2i outSize = this->compute_output_dims(rgbImage, depthImage, inSize);

  // Ensure the output images are the right size (always a no-op after the first time).
  keypointsImage->ChangeDims(outSize);
  descriptorsImage->ChangeDims(outSize);

  const Vector4i *depthOffsets = this->m_depthOffsets->GetData(MEMORYDEVICE_CUDA);
  const float *depths = depthImage ? depthImage->GetData(MEMORYDEVICE_CUDA) : NULL;
  const Vector4u *rgb = rgbImage ? rgbImage->GetData(MEMORYDEVICE_CUDA) : NULL;
  const uchar *rgbChannels = this->m_rgbChannels->GetData(MEMORYDEVICE_CUDA);
  const Vector4i *rgbOffsets = this->m_rgbOffsets->GetData(MEMORYDEVICE_CUDA);

  KeypointType *keypoints = keypointsImage->GetData(MEMORYDEVICE_CUDA);
  DescriptorType *descriptors = descriptorsImage->GetData(MEMORYDEVICE_CUDA);

  dim3 blockSize(32, 32);
  dim3 gridSize((outSize.x + blockSize.x - 1) / blockSize.x, (outSize.y + blockSize.y - 1) / blockSize.y);

  // Compute the keypoint for each pixel in the RGBD image.
  ck_compute_keypoints<<<gridSize,blockSize>>>(inSize, inRgbSize, outSize, rgb, depths, cameraPose, intrinsics, this->m_featureStep, keypoints);
  ORcudaKernelCheck;

  // If there is a depth image available and any depth features need to be computed, compute them for each keypoint.
  if(depths && this->m_depthFeatureCount > 0)
  {
    if(this->m_depthDifferenceType == PAIRWISE_DIFFERENCE)
    {
      ck_compute_depth_features<PAIRWISE_DIFFERENCE><<<gridSize,blockSize>>>(
        inSize, outSize, depths, depthOffsets, keypoints,
        this->m_depthFeatureCount, this->m_depthFeatureOffset,
        this->m_featureStep, this->m_normaliseDepth, descriptors
      );
    }
    else
    {
      ck_compute_depth_features<CENTRAL_DIFFERENCE><<<gridSize,blockSize>>>(
        inSize, outSize, depths, depthOffsets, keypoints,
        this->m_depthFeatureCount, this->m_depthFeatureOffset,
        this->m_featureStep, this->m_normaliseDepth, descriptors
      );
    }
    ORcudaKernelCheck;
  }

  // If there is a colour image available and any colour features need to be computed, compute them for each keypoint.
  if(rgb && this->m_rgbFeatureCount > 0)
  {
    if(this->m_rgbDifferenceType == PAIRWISE_DIFFERENCE)
    {
      ck_compute_colour_features<PAIRWISE_DIFFERENCE><<<gridSize,blockSize>>>(
        inSize, inRgbSize, outSize, rgb, depths, rgbOffsets, rgbChannels,
        keypoints, this->m_rgbFeatureCount, this->m_rgbFeatureOffset,
        this->m_featureStep, this->m_normaliseRgb, descriptors
      );
    }
    else
    {
      ck_compute_colour_features<CENTRAL_DIFFERENCE><<<gridSize,blockSize>>>(
        inSize, inRgbSize, outSize, rgb, depths, rgbOffsets, rgbChannels,
        keypoints, this->m_rgbFeatureCount, this->m_rgbFeatureOffset,
        this->m_featureStep, this->m_normaliseRgb, descriptors
      );
    }
    ORcudaKernelCheck;
  }
}

}
