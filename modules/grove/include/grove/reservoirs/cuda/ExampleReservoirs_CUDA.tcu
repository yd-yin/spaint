/**
 * grove: ExampleReservoirs_CUDA.tcu
 * Copyright (c) Torr Vision Group, University of Oxford, 2017. All rights reserved.
 */

#include "ExampleReservoirs_CUDA.h"

#include <itmx/base/MemoryBlockFactory.h>

#include "../../numbers/CUDARNG.h"
#include "../shared/ExampleReservoirs_Shared.h"

namespace grove {

//#################### CUDA KERNELS ####################

template <typename ExampleType, int IndexLength>
__global__ void ck_add_examples(const ExampleType *examples, const Vector2i imgSize, const ORUtils::VectorX<int,IndexLength> *reservoirIndicesPtr,
                                CUDARNG *rngs, ExampleType *reservoirs, int *reservoirSize, int *reservoirAddCalls, uint32_t reservoirCapacity)
{
  const int x = threadIdx.x + blockIdx.x * blockDim.x;
  const int y = threadIdx.y + blockIdx.y * blockDim.y;

  if (x >= imgSize.x || y >= imgSize.y) return;

  const int linearIdx = y * imgSize.x + x;
  const int *indices = reservoirIndicesPtr[linearIdx].v;

  example_reservoirs_add_example(examples[linearIdx], indices, IndexLength, rngs[linearIdx], reservoirs, reservoirSize, reservoirAddCalls, reservoirCapacity);
}

//#################### CONSTRUCTORS ####################

template <typename ExampleType>
ExampleReservoirs_CUDA<ExampleType>::ExampleReservoirs_CUDA(uint32_t reservoirCapacity, uint32_t reservoirCount, uint32_t rngSeed)
: ExampleReservoirs<ExampleType>(reservoirCapacity, reservoirCount, rngSeed)
{
  itmx::MemoryBlockFactory& mbf = itmx::MemoryBlockFactory::instance();

  // Initialise the random number generators.
  m_rngs = mbf.make_block<CUDARNG>();
  init_random();
}

//#################### PUBLIC VIRTUAL MEMBER FUNCTIONS ####################

template <typename ExampleType>
void ExampleReservoirs_CUDA<ExampleType>::clear()
{
  ExampleReservoirs<ExampleType>::clear();
  init_random();
}

//#################### PRIVATE MEMBER FUNCTIONS ####################

template <typename ExampleType>
template <int IndexLength>
void ExampleReservoirs_CUDA<ExampleType>::add_examples_sub(const ExampleImage_CPtr& examples, const boost::shared_ptr<const ORUtils::Image<ORUtils::VectorX<int,IndexLength> > >& reservoirIndices)
{
#ifdef __CUDACC__
  const Vector2i imgSize = examples->noDims;
  const size_t nbExamples = imgSize.width * imgSize.height;

  // Check that we have enough random number generators and, if not, reallocate them.
  if(nbExamples > m_rngs->dataSize)
  {
    m_rngs->Resize(nbExamples);
    init_random();
  }

  const ExampleType *exampleData = examples->GetData(MEMORYDEVICE_CUDA);

  CUDARNG *rngs = m_rngs->GetData(MEMORYDEVICE_CUDA);
  int *reservoirAddCalls = this->m_reservoirAddCalls->GetData(MEMORYDEVICE_CUDA);
  ExampleType *reservoirData = this->m_reservoirs->GetData(MEMORYDEVICE_CUDA);
  int *reservoirSizes = this->m_reservoirSizes->GetData(MEMORYDEVICE_CUDA);

  dim3 blockSize(32, 32);
  dim3 gridSize((imgSize.width + blockSize.x - 1) / blockSize.x, (imgSize.height + blockSize.y - 1) / blockSize.y);
  ck_add_examples<<<gridSize, blockSize>>>(exampleData, imgSize, reservoirIndices->GetData(MEMORYDEVICE_CUDA),
      rngs, reservoirData, reservoirSizes, reservoirAddCalls, this->m_reservoirCapacity);
  ORcudaKernelCheck;
#endif
}

//#################### PRIVATE MEMBER FUNCTIONS ####################

template <typename ExampleType>
void ExampleReservoirs_CUDA<ExampleType>::init_random()
{
#ifdef __CUDACC__
  const int rngCount = static_cast<int>(m_rngs->dataSize);
  if(rngCount == 0) return;

  CUDARNG *rngs = m_rngs->GetData(MEMORYDEVICE_CUDA);

  // Initialize random states
  dim3 blockSize(256);
  dim3 gridSize((rngCount + blockSize.x - 1) / blockSize.x);
  ck_init_rngs<<<gridSize, blockSize>>>(rngs, rngCount, this->m_rngSeed);
  ORcudaKernelCheck;
#endif
}

}
