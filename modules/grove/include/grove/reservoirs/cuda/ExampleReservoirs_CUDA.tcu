/**
 * grove: ExampleReservoirs_CUDA.tcu
 * Copyright (c) Torr Vision Group, University of Oxford, 2017. All rights reserved.
 */

#include "ExampleReservoirs_CUDA.h"

#include <boost/filesystem.hpp>
namespace bf = boost::filesystem;

#include <ORUtils/MemoryBlockPersister.h>

#include <orx/base/MemoryBlockFactory.h>

#include "../shared/ExampleReservoirs_Shared.h"

namespace grove {

//#################### CUDA KERNELS ####################

template <typename ExampleType, int ReservoirIndexCount>
__global__ void ck_add_examples(const ExampleType *examples, const Vector2i imgSize, const ORUtils::VectorX<int,ReservoirIndexCount> *reservoirIndicesPtr,
                                ExampleType *reservoirs, int *reservoirSize, int *reservoirAddCalls, uint32_t reservoirCapacity, CUDARNG *rngs)
{
  const int x = threadIdx.x + blockIdx.x * blockDim.x;
  const int y = threadIdx.y + blockIdx.y * blockDim.y;

  if(x < imgSize.width && y < imgSize.height)
  {
    const int linearIdx = y * imgSize.x + x;
    add_example_to_reservoirs(
      examples[linearIdx], reservoirIndicesPtr[linearIdx].v, ReservoirIndexCount, reservoirs,
      reservoirSize, reservoirAddCalls, reservoirCapacity, rngs[linearIdx]
    );
  }
}

//#################### CONSTRUCTORS ####################

template <typename ExampleType>
ExampleReservoirs_CUDA<ExampleType>::ExampleReservoirs_CUDA(uint32_t reservoirCount, uint32_t reservoirCapacity, uint32_t rngSeed)
: ExampleReservoirs<ExampleType>(reservoirCount, reservoirCapacity, rngSeed)
{
  orx::MemoryBlockFactory& mbf = orx::MemoryBlockFactory::instance();
  m_rngs = mbf.make_block<CUDARNG>();

  reset();
}

//#################### PUBLIC MEMBER FUNCTIONS ####################

template <typename ExampleType>
void ExampleReservoirs_CUDA<ExampleType>::reset()
{
  ExampleReservoirs<ExampleType>::reset();
  reinit_rngs();
}

//#################### PRIVATE MEMBER FUNCTIONS ####################

template <typename ExampleType>
void ExampleReservoirs_CUDA<ExampleType>::accept(const Visitor& visitor)
{
  visitor.visit(*this);
}

template <typename ExampleType>
template <int ReservoirIndexCount>
void ExampleReservoirs_CUDA<ExampleType>::add_examples_sub(const ExampleImage_CPtr& examples, const boost::shared_ptr<const ORUtils::Image<ORUtils::VectorX<int,ReservoirIndexCount> > >& reservoirIndices)
{
  const Vector2i imgSize = examples->noDims;
  const size_t exampleCount = imgSize.width * imgSize.height;

  // Check that we have enough random number generators and reallocate them if not.
  if(m_rngs->dataSize < exampleCount)
  {
    m_rngs->Resize(exampleCount);
    reinit_rngs();
  }

  // Add each example to the relevant reservoirs.
  dim3 blockSize(32, 32);
  dim3 gridSize((imgSize.width + blockSize.x - 1) / blockSize.x, (imgSize.height + blockSize.y - 1) / blockSize.y);

  ck_add_examples<<<gridSize,blockSize>>>(
    examples->GetData(MEMORYDEVICE_CUDA),
    imgSize,
    reservoirIndices->GetData(MEMORYDEVICE_CUDA),
    this->m_reservoirs->GetData(MEMORYDEVICE_CUDA),
    this->m_reservoirSizes->GetData(MEMORYDEVICE_CUDA),
    this->m_reservoirAddCalls->GetData(MEMORYDEVICE_CUDA),
    this->m_reservoirCapacity,
    m_rngs->GetData(MEMORYDEVICE_CUDA)
  );
  ORcudaKernelCheck;
}

template<typename ExampleType>
void ExampleReservoirs_CUDA<ExampleType>::load_from_disk_sub(const std::string& inputFolder)
{
  // Load the RNG states.
  bf::path inputPath(inputFolder);
  ORUtils::MemoryBlockPersister::LoadMemoryBlock((inputPath / "reservoirRngs.bin").string(), *m_rngs, MEMORYDEVICE_CPU);

  // Copy them across to the GPU.
  m_rngs->UpdateDeviceFromHost();
}

template <typename ExampleType>
void ExampleReservoirs_CUDA<ExampleType>::reinit_rngs()
{
  // If there aren't currently any random number generators to reinitialise, early out.
  // We need to check this because CUDA kernels can't be called with zero threads.
  const int rngCount = static_cast<int>(m_rngs->dataSize);
  if(rngCount == 0) return;

  // Reinitialise each random number generator based on the specified seed.
  dim3 blockSize(256);
  dim3 gridSize((rngCount + blockSize.x - 1) / blockSize.x);

  ck_reinit_rngs<<<gridSize,blockSize>>>(
    m_rngs->GetData(MEMORYDEVICE_CUDA),
    rngCount,
    this->m_rngSeed
  );
  ORcudaKernelCheck;
}

template<typename ExampleType>
void ExampleReservoirs_CUDA<ExampleType>::save_to_disk_sub(const std::string& outputFolder)
{
  // Copy the RNG states across to the CPU so that they can be saved.
  m_rngs->UpdateHostFromDevice();

  // Save them to disk.
  bf::path outputPath(outputFolder);
  ORUtils::MemoryBlockPersister::SaveMemoryBlock((outputPath / "reservoirRngs.bin").string(), *m_rngs, MEMORYDEVICE_CPU);
}

}
