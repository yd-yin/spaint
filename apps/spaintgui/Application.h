/**
 * spaintgui: Application.h
 */

#ifndef H_SPAINTGUI_APPLICATION
#define H_SPAINTGUI_APPLICATION

#include <SDL.h>

#include <spaint/input/InputState.h>
#include <spaint/main/SpaintEngine.h>
#include <spaint/util/SharedPtr.h>

/**
 * \brief The main application class for spaintgui.
 */
class Application
{
  //#################### TYPEDEFS ####################
private:
  typedef spaint::shared_ptr<void> SDL_GLContext_Ptr;
  typedef spaint::shared_ptr<SDL_Window> SDL_Window_Ptr;

  //#################### ENUMERATIONS ####################
private:
  /**
   * \brief An enumeration containing the different possible targets for rendering the scene.
   */
  enum RenderTarget
  {
#ifdef WITH_OVR
    /** Render the scene on the Oculus Rift. */
    RENDERTARGET_RIFT,
#endif

    /** Render the scene into a window. */
    RENDERTARGET_WINDOWED,
  };

  //#################### PRIVATE VARIABLES ####################
private:
  /** The OpenGL context for the main window. */
  SDL_GLContext_Ptr m_context;

  /** The current state of the keyboard and mouse. */
  spaint::InputState m_inputState;

  /** The current target for rendering the scene. */
  RenderTarget m_renderTarget;

  /** The spaint engine that the application should use. */
  spaint::SpaintEngine_Ptr m_spaintEngine;

  /** The main window for the application. */
  SDL_Window_Ptr m_window;

  //#################### CONSTRUCTORS ####################
public:
  /**
   * \brief Constructs the application.
   *
   * \param spaintEngine The spaint engine that the application should use.
   */
  explicit Application(const spaint::SpaintEngine_Ptr& spaintEngine);

  //#################### PUBLIC MEMBER FUNCTIONS ####################
public:
  /**
   * \brief Runs the application.
   */
  void run();

  //#################### PRIVATE MEMBER FUNCTIONS ####################
private:
  /**
   * \brief Handle key down events.
   *
   * \param keysym  A representation of the key that has been pressed.
   */
  void handle_key_down(const SDL_Keysym& keysym);

  /**
   * \brief Handle key up events.
   *
   * \param keysym  A representation of the key that has been released.
   */
  void handle_key_up(const SDL_Keysym& keysym);

  /**
   * \brief Handle mouse button down events.
   *
   * \param e   The mouse button down event.
   */
  void handle_mousebutton_down(const SDL_MouseButtonEvent& e);

  /**
   * \brief Handle mouse button up events.
   *
   * \param e   The mouse button up event.
   */
  void handle_mousebutton_up(const SDL_MouseButtonEvent& e);

  /**
   * \brief Processes any SDL events (e.g. those generated by user input).
   *
   * \return true, if the application should continue running, or false otherwise.
   */
  bool process_events();

  /**
   * \brief Renders the scene into the main window.
   */
  void render() const;

  /**
   * \brief Start rendering on the specified render target.
   *
   * \param renderTarget  The render target on which to start rendering.
   */
  void start_rendering_on(RenderTarget renderTarget);

  /**
   * \brief Stop rendering on the specified render target.
   *
   * \param renderTarget  The render target on which to stop rendering.
   */
  void stop_rendering_on(RenderTarget renderTarget);

  /**
   * \brief Switch to a new render target.
   *
   * \param renderTarget  The new render target.
   */
  void switch_render_target(RenderTarget renderTarget);
};

#endif
