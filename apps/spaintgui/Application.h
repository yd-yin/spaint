/**
 * spaintgui: Application.h
 */

#ifndef H_SPAINTGUI_APPLICATION
#define H_SPAINTGUI_APPLICATION

#include <SDL.h>

// Suppress the definition of M_PI provided by SDL - we want the one in <cmath>.
#ifdef M_PI
#undef M_PI
#endif

#include <spaint/core/SpaintPipeline.h>
#include <spaint/input/InputState.h>

#include <tvgutil/commands/CommandManager.h>

#include "Renderer.h"

/**
 * \brief The main application class for spaintgui.
 */
class Application
{
  //#################### TYPEDEFS ####################
private:
  typedef boost::shared_ptr<Renderer> Renderer_Ptr;
  typedef Renderer::RenderState_CPtr RenderState_CPtr;

  //#################### PRIVATE VARIABLES ####################
private:
  /** The command manager. */
  tvgutil::CommandManager m_commandManager;

  /** The current state of the keyboard and mouse. */
  spaint::InputState m_inputState;

  /** The current renderer. */
  Renderer_Ptr m_renderer;

  /** The spaint pipeline that the application should use. */
  spaint::SpaintPipeline_Ptr m_spaintPipeline;

  //#################### CONSTRUCTORS ####################
public:
  /**
   * \brief Constructs the application.
   *
   * \param spaintPipeline  The spaint pipeline that the application should use.
   */
  explicit Application(const spaint::SpaintPipeline_Ptr& spaintPipeline);

  //#################### PUBLIC MEMBER FUNCTIONS ####################
public:
  /**
   * \brief Runs the application.
   */
  void run();

  //#################### PRIVATE MEMBER FUNCTIONS ####################
private:
  /**
   * \brief Gets the current monocular render state.
   *
   * If we're rendering in stereo, this will return the render state corresponding to the left eye.
   *
   * \return  The current monocular render state.
   */
  Renderer::RenderState_CPtr get_monocular_render_state() const;

  /**
   * \brief Handle key down events.
   *
   * \param keysym  A representation of the key that has been pressed.
   */
  void handle_key_down(const SDL_Keysym& keysym);

  /**
   * \brief Handle key up events.
   *
   * \param keysym  A representation of the key that has been released.
   */
  void handle_key_up(const SDL_Keysym& keysym);

  /**
   * \brief Handle mouse button down events.
   *
   * \param e The mouse button down event.
   */
  void handle_mousebutton_down(const SDL_MouseButtonEvent& e);

  /**
   * \brief Handle mouse button up events.
   *
   * \param e The mouse button up event.
   */
  void handle_mousebutton_up(const SDL_MouseButtonEvent& e);

  /**
   * \brief Processes user input that deals with the camera.
   */
  void process_camera_input();

  /**
   * \brief Processes user input that deals with commands (i.e. undo/redo).
   */
  void process_command_input();

  /**
   * \brief Processes any SDL events (e.g. those generated by user input).
   *
   * \return true, if the application should continue running, or false otherwise.
   */
  bool process_events();

  /**
   * \brief Takes action as relevant based on the current input state.
   */
  void process_input();

  /**
   * \brief Processes user input that deals with labelling the scene.
   */
  void process_labelling_input();

  /**
   * \brief Processes user input that deals with switching pipeline mode.
   */
  void process_mode_input();

  /**
   * \brief Processes user input that deals with switching the renderer or raycast type.
   */
  void process_renderer_input();
};

#endif
